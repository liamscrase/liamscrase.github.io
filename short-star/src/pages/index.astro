---
import Header from "../components/header.astro";
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="stylesheet" href="/styles.css" />
		<title>Astro</title>
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Chivo+Mono:ital,wght@0,100..900;1,100..900&family=Zalando+Sans:ital,wght@0,200..900;1,200..900&display=swap"
			rel="stylesheet"
		/>
	</head>
	<body>
		<Header />

		<header>
			<section id="banner">
				<h1 id="banner-header"></h1>
			</section>
		</header>
		<section id="projects">
			<h2>Projects</h2>
			<section id="project-list">
					<div class="project-card">
						<div class="text">
							<h3>Acme Cars Website</h3>
							<p>
									Elevating the standards for car dealer websites in New Zealand with a modern design and cutting-edge helpful AI features 
							</p>
							<a
								class="button"
								href="https://staging.acmecars.co.nz/"
								>View Project</a
							>
						</div>
						<a class="project-link" href="https://staging.acmecars.co.nz/" aria-label="Open Acme Cars project">
							<img src="/images/acme5/acme5.webp" alt="Acme Cars website preview" />
						</a>
					</div>
			</section>
		</section>
	</body>
</html>

<script>
	// @ts-nocheck

	/* ======= Config ======= */
	const roles = ["digital designer", "front-end developer", "problem-solver"];
	const typingSpeed = 80; // ms per character
	/* ====================== */

	const bannerHeader = document.getElementById("banner-header");

	/* Create one cursor element and reuse it */
	const cursor = document.createElement("span");
	cursor.className = "cursor";
	// Remove blinking for now; it will start later
	cursor.style.animation = "none";
	cursor.textContent = "|";

	/* Utility: position the cursor at the end of the content inside a line */
	function updateCursorPosition(lineEl, contentEl) {
		const contentRect = contentEl.getBoundingClientRect();
		const lineRect = lineEl.getBoundingClientRect();
		const left = contentRect.right - lineRect.left;
		const top = contentRect.top - lineRect.top;
		cursor.style.left = Math.round(left) + "px";
		cursor.style.top = Math.round(top) + "px";
	}

	/* Type a single role into `lineEl` (the line container). When done, call cb(). */
	function typeRole(role, lineEl, cb, isLastRole = false) {
		lineEl.style.position = lineEl.style.position || "relative";

		const content = document.createElement("span");
		content.className = "content";
		lineEl.appendChild(content);

		// Attach cursor (always visible)
		lineEl.appendChild(cursor);
		updateCursorPosition(lineEl, content);

		let i = 0;
		function step() {
			if (i < role.length) {
				content.textContent += role[i];
				i++;

				// Start blinking about 0.2 seconds before the last role finishes
				if (isLastRole && i >= role.length - 2) {
					cursor.style.animation = "blink 0.8s steps(1) infinite";
				}

				updateCursorPosition(lineEl, content);
				setTimeout(step, typingSpeed);
			} else {
				cb();
			}
		}

		step();
	}

	/* Create the new banner structure */
	function createBannerContent() {
		// Clear existing content
		bannerHeader.innerHTML = "";
		cursor.style.animation = "none";

		// Create first line: "Hey! I'm Liam"
		const line1 = document.createElement("div");
		line1.className = "line static-line";
		line1.textContent = "Hey! I'm Liam";
		bannerHeader.appendChild(line1);

		// Create second line with dynamic content
		const line2 = document.createElement("div");
		line2.className = "line dynamic-line";
		bannerHeader.appendChild(line2);

		// Create "a " prefix
		const prefix = document.createElement("span");
		prefix.textContent = "a ";
		prefix.className = "prefix";
		line2.appendChild(prefix);

		// Create dynamic content container
		const content = document.createElement("span");
		content.className = "content";
		line2.appendChild(content);

		// Attach cursor to the dynamic line
		line2.appendChild(cursor);
		line2.style.position = "relative";

		return { line2, content };
	}

	/* Animate cycling through roles */
	function animateRoles() {
		const { line2, content } = createBannerContent();
		let currentRoleIndex = 0;

		function typeCurrentRole() {
			const role = roles[currentRoleIndex];
			content.textContent = "";

			updateCursorPosition(line2, content);

			let i = 0;
			function step() {
				if (i < role.length) {
					content.textContent += role[i];
					i++;

					updateCursorPosition(line2, content);
					setTimeout(step, typingSpeed);
				} else {
					// Role fully typed, wait then erase
					setTimeout(() => {
						eraseCurrentRole();
					}, 2000);
				}
			}
			step();
		}

		function eraseCurrentRole() {
			const currentText = content.textContent;
			let i = currentText.length;

			function eraseStep() {
				if (i > 0) {
					content.textContent = currentText.substring(0, i - 1);
					i--;
					updateCursorPosition(line2, content);
					setTimeout(eraseStep, typingSpeed / 2);
				} else {
					// Move to next role
					currentRoleIndex = (currentRoleIndex + 1) % roles.length;
					setTimeout(typeCurrentRole, 500);
				}
			}
			eraseStep();
		}

		// Start the animation
		typeCurrentRole();

		// Start cursor blinking
		setTimeout(() => {
			cursor.style.animation = "blink 0.8s steps(1) infinite";
		}, 1000);
	}

	/* Initialize the banner */
	function initBanner() {
		animateRoles();
	}

	initBanner();

	// Update cursor position when window resizes (for responsive font size changes)
	let currentContentEl = null;
	let currentLineEl = null;

	// Handle resize - update cursor position
	window.addEventListener("resize", function () {
		const dynamicLine = document.querySelector(".dynamic-line");
		const content = document.querySelector(".content");
		if (dynamicLine && content && cursor.parentNode) {
			updateCursorPosition(dynamicLine, content);
		}
	});

	// Store references to current content and line elements
	function storeCurrentElements() {
		const lines = document.querySelectorAll("#banner-header .line");
		if (lines.length > 0) {
			currentLineEl = lines[lines.length - 1]; // Get the last line
			currentContentEl = currentLineEl.querySelector(".content");
		}
	}
</script>
